# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    # директория из которой загружаются файлы
    dirForLoadFiles: '%kernel.root_dir%/../upload/ReestrsForLoad/'
    # директория в которую переносятся загруженные без проблем файлы
    dirForMoveFiles: '%kernel.root_dir%/../upload/ReestrsForLoad_success/'
    # директория в которую переносятся файлы с ошибками валидации
    dirForMoveFilesWithError: '%kernel.root_dir%/../upload/ReestrsForLoad_error/'
    # директория для загрузки данных в таблицу ЕРПН Полученные (кредит)
    dirForFilesERPN_In: '%kernel.root_dir%/../upload/ERPN/InvoiceIn/'
    # директория для загрузки данных в таблицу ЕРПН Выданные (обязательства)
    dirForFilesERPN_Out: '%kernel.root_dir%/../upload/ERPN/InvoiceOut/'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

#services command
    # сервис команды для загрузки данных реестров из файлов
    app.command.load_data_from_files_command:
            class: App\Command\LoadDataFromFilesCommand
            arguments: ['@app.services.load_reestr_from_file']
            tags:
                - { name: console.command }
# services class service
    #  сервис для загрузки данных реестров из файлов
    app.services.load_reestr_from_file:
        class: App\Services\LoadReestrFromFile
        arguments: ['@Doctrine\ORM\EntityManagerInterface']
        calls:
            - [setDirForMoveFiles, ['%dirForMoveFiles%']]
            - [setCache, ['@App\Utilits\loadDataExcel\cacheDataRow\cacheDataRow']]
            - [setDirForLoadFiles, ['%dirForLoadFiles%']]
            - [setDirForMoveFilesWithError, ['%dirForMoveFilesWithError%']]
    #  сервис для загрузки данных ЕРПН из файлов csv
    App\Services\loadDataInFile_ERPN:
        arguments:
            $dirForFilesERPN_In: '%dirForFilesERPN_In%'
            $dirForFilesERPN_Out: '%dirForFilesERPN_Out%'
    #  сервис для поиска данных в ЕРПН по параметрам
    app.services.search_erpn_from_param:
        class: App\Services\searchErpnFromParam
        arguments: ['@Doctrine\ORM\EntityManagerInterface']